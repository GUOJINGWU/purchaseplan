package com.youzhicai.purchaseplan.web.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;

import org.apache.commons.lang.time.FastDateFormat;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.util.IOUtils;
import org.springframework.util.StringUtils;

public class ExcelUtil {
    /**
     * 2003- 版本的excel
     */
    private static final String excel2003L = ".xls"; //
    /**
     * 2007+ 版本的excel
     */
    private static final String excel2007U = ".xlsx"; //

    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("0");

    private static final DecimalFormat DECIMAL_FORMAT_DECIMAL = new DecimalFormat("0.00");

    private static final DecimalFormat DECIMAL_FORMAT_PERCENT = new DecimalFormat("##.00%");

    private static final FastDateFormat FAST_DATE_FORMAT = FastDateFormat.getInstance("yyyy/MM/dd");

    private static final DecimalFormat DECIMAL_FORMAT_NUMBER = new DecimalFormat("0.00E000");

    private static final Pattern POINTS_PATTERN = Pattern.compile("0.0+_*[^/s]+");

    public static void main(String[] args) throws Exception {
        String fileName = "priceGoods.xls";
        File file = new File("D:\\FileTest\\planEcxel.xls");
        FileInputStream fileInputStream = new FileInputStream(file);
        List<List<Object>> list = new ExcelUtil().ReadExcel(fileInputStream, fileName);
        System.err.println("list--->"+list.toString());
    }
    
    public List<List<Object>> ReadExcel(InputStream in, String fileName) throws Exception {
        String fileType = fileName.substring(fileName.lastIndexOf("."));
        if (!excel2003L.equals(fileType) && !excel2007U.equals(fileType)) {
            throw new Exception("解析的文件格式有误！");
        }
        List<List<Object>> list = new LinkedList<>();
        Workbook workbook = null;
        try {
            workbook = WorkbookFactory.create(in);
            int sheetsNumber = workbook.getNumberOfSheets();
            for (int n = 0; n < sheetsNumber; n++) {
                Sheet sheet = workbook.getSheetAt(n);
                Object value = null;
                Row row = null;
                Cell cell = null;
                for (int i = 0; i <= sheet.getPhysicalNumberOfRows(); i++) {
                    row = sheet.getRow(i);
                    if (StringUtils.isEmpty(row)) {
                        continue;
                    }
                    List<Object> linked = new LinkedList<>();
                    for (int j = 0; j < row.getLastCellNum(); j++) {
                        cell = row.getCell(j);
                        if (StringUtils.isEmpty(cell)) {
                            value = "";
                            linked.add(value);
                            continue;
                        }
                        value = this.getCellValue(cell);
                        linked.add(value);
                    }
                    list.add(linked);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            IOUtils.closeQuietly(workbook);
            IOUtils.closeQuietly(in);
        }
        return list;
    }

    private Object getCellValue(Cell cell) {
        Object value = null;
        switch (cell.getCellTypeEnum()) {
        case _NONE:
            value = "";
            break;
        case STRING:
            value = cell.getStringCellValue();
            break;
        case NUMERIC:
            if (DateUtil.isCellDateFormatted(cell)) { // 日期
                value = FAST_DATE_FORMAT.format(DateUtil.getJavaDate(cell.getNumericCellValue()));
            } else if ("@".equals(cell.getCellStyle().getDataFormatString())
                    || "General".equals(cell.getCellStyle().getDataFormatString())
                    || "0_ ".equals(cell.getCellStyle().getDataFormatString())) {
                value = DECIMAL_FORMAT.format(cell.getNumericCellValue());
            } else if (POINTS_PATTERN.matcher(cell.getCellStyle().getDataFormatString()).matches()) {
                value = cell.getNumericCellValue();
            } else if ("0.00E+00".equals(cell.getCellStyle().getDataFormatString())) {
                value = cell.getNumericCellValue();
                value = DECIMAL_FORMAT_NUMBER.format(value);
            } else if ("0.00%".equals(cell.getCellStyle().getDataFormatString())) {
                value = cell.getNumericCellValue();
                value = DECIMAL_FORMAT_PERCENT.format(value);
            } else if ("# ?/?".equals(cell.getCellStyle().getDataFormatString())) {
                value = cell.getNumericCellValue();
            } else {
                value = cell.getNumericCellValue();
                value = DecimalFormat.getCurrencyInstance().format(value);
            }
            break;
        case BOOLEAN:
            value = cell.getBooleanCellValue();
            break;
        case BLANK:
            value = "";
            break;
        case FORMULA:
            value = cell.getNumericCellValue();
            value = DECIMAL_FORMAT_DECIMAL.format(value);
        default:
            value = "";
            break;
        }
        return value;
    }
}
