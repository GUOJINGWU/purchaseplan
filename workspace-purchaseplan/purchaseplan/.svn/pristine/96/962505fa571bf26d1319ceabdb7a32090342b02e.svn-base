package com.youzhicai.purchaseplan.web.controller;

import java.io.InputStream;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.youzhicai.purchaseplan.api.MaterialstoreGoodsAPI;
import com.youzhicai.purchaseplan.api.PurchasePlanListAPI;
import com.youzhicai.purchaseplan.common.constant.TypeTokens;
import com.youzhicai.purchaseplan.common.util.POUtil;
import com.youzhicai.purchaseplan.dto.PurchaseGoodsSupplyDTO;
import com.youzhicai.purchaseplan.dto.PurchasePlanListDTO;
import com.youzhicai.purchaseplan.enums.BasicEnums;
import com.youzhicai.purchaseplan.vo.MaterialstoreGoodsVO;
import com.youzhicai.purchaseplan.web.common.PurchaseTypeEnum;
import com.youzhicai.purchaseplan.web.common.PureProjectStatusEnum;
import com.youzhicai.purchaseplan.web.domain.AuthInfo;
import com.youzhicai.purchaseplan.web.entity.ReturnInfo;
import com.youzhicai.purchaseplan.web.service.MaterialstoreService;
import com.youzhicai.purchaseplan.web.util.ConfigUtil;
import com.youzhicai.purchaseplan.web.util.ExcelUtil;
import com.youzhicai.purchaseplan.web.util.RandomUtil;
import com.youzhicai.purchaseplan.web.util.StringUtil;

/**
 * 
 * @ClassName: PurchasePlanRest
 * @author: xia.nan
 * @date: 2018年10月16日 下午5:07:58
 */
@RestController
@RequestMapping(value = "purchaseplanrest")
public class PurchasePlanRestController {

    @Autowired
    private MaterialstoreGoodsAPI materialstoreGoodsAPI;

    @Autowired
    private PurchasePlanListAPI planListAPI;

    @Autowired
    private MaterialstoreService materialstoreService;

    @SuppressWarnings("rawtypes")
    @RequestMapping(value = "savepurchaseplanlist")
    public ReturnInfo savePurchasePlanList(HttpServletRequest request, @RequestBody PurchasePlanListDTO planListDTO) {
        ReturnInfo info = new ReturnInfo();
        AuthInfo auth = (AuthInfo) request.getSession().getAttribute(ConfigUtil.getValue("AuthInfo"));
        List<MaterialstoreGoodsVO> materialstoreGoods = materialstoreGoodsAPI.getMaterialstoreGoodsById(planListDTO.getGoods_id());
        List<PurchasePlanListDTO> saveList = MaterialstoreGoodsToPurchasePlanListDTO(materialstoreGoods, auth, planListDTO);
        int savePurchasePlanList = planListAPI.savePurchasePlanList(saveList);
        if (savePurchasePlanList > 0) {
            List<PurchaseGoodsSupplyDTO> saveGoodsList = POUtil.convert(materialstoreGoodsAPI.getPurchaseGoodsSupply(planListDTO.getGoods_id()),
                    PurchaseGoodsSupplyDTO.class, TypeTokens.PurchaseGoodsSupplyTypeDTO);
            for (PurchaseGoodsSupplyDTO goods : saveGoodsList) {
                goods.setInformation_id(planListDTO.getInformation_id());
            }
            planListAPI.saveGoodsSupply(saveGoodsList);
        }
        info.setStatus(PureProjectStatusEnum.COMPLETED.getStatus());
        info.setDesc("保存成功！！");
        return info;
    }

    private List<PurchasePlanListDTO> MaterialstoreGoodsToPurchasePlanListDTO(List<MaterialstoreGoodsVO> materialstoreGoods, AuthInfo auth,
            PurchasePlanListDTO planListDTO) {
        List<PurchasePlanListDTO> list = new ArrayList<PurchasePlanListDTO>(materialstoreGoods.size());

        for (MaterialstoreGoodsVO mVo : materialstoreGoods) {
            PurchasePlanListDTO purchasePlanListDTO = new PurchasePlanListDTO();
            purchasePlanListDTO.setInformation_id(planListDTO.getInformation_id());
            purchasePlanListDTO.setGoods_id(mVo.getId());
            purchasePlanListDTO.setPlan_coding(mVo.getCode());
            purchasePlanListDTO.setPlan_name(mVo.getName());
            purchasePlanListDTO.setPlan_brand(mVo.getBrand());
            purchasePlanListDTO.setPlan_specifications(mVo.getSpecifications());
            purchasePlanListDTO.setPlan_unit(mVo.getUnit());
            purchasePlanListDTO.setPlan_manual(mVo.getRemarks());
            purchasePlanListDTO.setPlan_quantity(planListDTO.getPlan_quantity());
            list.add(purchasePlanListDTO);
        }
        return list;
    }

    /**
     * 
     * @Title: removePurchaseplanList
     * @param request
     * @param planListDTO
     * @return
     * @return: ReturnInfo
     */
    @SuppressWarnings("rawtypes")
    @RequestMapping(value = "removepurchaseplanlist")
    public ReturnInfo removePurchaseplanList(HttpServletRequest request, @RequestBody PurchasePlanListDTO planListDTO) {
        ReturnInfo info = new ReturnInfo();
        int remove = planListAPI.removePurchasePlanListById(planListDTO.getId());
        if (remove > 0) {
            info.setStatus(BasicEnums.SUCCESS.getStatus());
            info.setDesc(BasicEnums.SUCCESS.getValue());
        } else {
            info.setStatus(BasicEnums.FAILURE.getStatus());
            info.setDesc(BasicEnums.FAILURE.getValue());
        }
        return info;
    }

    @SuppressWarnings("rawtypes")
    @RequestMapping(value = "batchimportexcel")
    public ReturnInfo BatchImportExcel(HttpServletRequest request, @RequestParam(value = "fileExcel", required = true) MultipartFile file,
            Long informationid, Integer purchasetype) {
        ReturnInfo info = new ReturnInfo();
        AuthInfo auth = (AuthInfo) request.getSession().getAttribute(ConfigUtil.getValue("AuthInfo"));
        try {
            if (file != null && !file.isEmpty() && informationid != null) {
                InputStream in = file.getInputStream();
                String fileName = file.getOriginalFilename();
                if (StringUtil.isNullOrEmpty(file.getOriginalFilename())) {
                    info.setStatus(BasicEnums.FAILURE.getStatus());
                    info.setDesc("未找到上传文件，请重新重新上传！！");
                    return info;
                }
                String suffix = fileName.substring(fileName.indexOf("."), fileName.length());
                if (!".xls".equals(suffix.toLowerCase()) && !".xlsx".equals(suffix.toLowerCase())) {
                    info.setStatus(BasicEnums.FAILURE.getStatus());
                    info.setDesc("文件格式不正确，请下载系统模板重新导入");
                    return info;
                }
                List<List<Object>> listob = new ExcelUtil().ReadExcel(in, fileName);
                ReturnInfo<PurchasePlanListDTO> excelToPlanList = this.excelToPlanList(listob, informationid);
                if (excelToPlanList.getStatus().intValue() == BasicEnums.FAILURE.getStatus()) {
                    return excelToPlanList;
                }
                List<PurchasePlanListDTO> dtos;
                if (purchasetype != null && purchasetype.intValue() == PurchaseTypeEnum.CONCENTRATED.getStatus()) {
                    dtos = materialstoreService.validation(excelToPlanList.getDataList(), auth);
                } else {
                    dtos = excelToPlanList.getDataList();
                }
                planListAPI.savePurchasePlanList(dtos);
                info.setStatus(BasicEnums.SUCCESS.getStatus());
                return info;
            }
        } catch (Exception e) {
        }
        return info;
    }

    /**
     * 
     * @Title: fileChangePurchasePlanListDTO
     * @param file
     * @param informationid
     * @return
     * @return: List<PurchasePlanListDTO>
     */
    private ReturnInfo<PurchasePlanListDTO> excelToPlanList(List<List<Object>> listob, Long informationid) {
        ReturnInfo<PurchasePlanListDTO> info = new ReturnInfo<PurchasePlanListDTO>();
        List<PurchasePlanListDTO> dtoList = new ArrayList<PurchasePlanListDTO>(listob.size());
        if (!StringUtil.isStrIdentical(listob.get(0).get(0) + "", "需求计划")) {
            info.setStatus(BasicEnums.FAILURE.getStatus());
            info.setDesc("导入文件不符合要求，请重新下载模板填写！！");
            return info;
        }
        for (int i = 3; i < listob.size(); i++) {
            PurchasePlanListDTO dto = new PurchasePlanListDTO();
            dto.setInformation_id(informationid);
            List<Object> listIn = listob.get(i);
            for (int j = 0; j < listIn.size(); j++) {
                switch (j) {
                case 0:// 物资编码
                    String str = listIn.get(j) + "";
                    if (StringUtil.isNullOrEmpty(str)) {
                        dto.setPlan_coding("ZX" + new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + RandomUtil.randomStrByLength(5));
                    } else {
                        dto.setPlan_coding(str);
                    }
                    break;
                case 1:// 物资名称
                    String str1 = listIn.get(j) + "";
                    if (StringUtil.isNullOrEmpty(str1)) {
                        info.setStatus(BasicEnums.FAILURE.getStatus());
                        info.setDesc("第" + (i + 1) + "行，未填写物资名称，请重新填写");
                        return info;
                    } else {
                        dto.setPlan_name(str1);
                    }
                    break;
                case 2:// 材质
                    String str2 = listIn.get(j) + "";
                    if (!StringUtil.isNullOrEmpty(str2)) {
                        dto.setPlan_brand(str2);
                    }
                    break;
                case 3:// 规格/型号
                    String str3 = listIn.get(j) + "";
                    if (!StringUtil.isNullOrEmpty(str3)) {
                        dto.setPlan_specifications(str3);
                    }
                    break;
                case 4:// 其他属性
                    String str4 = listIn.get(j) + "";
                    if (!StringUtil.isNullOrEmpty(str4)) {
                        dto.setOther_attribute(str4);
                    }
                    break;
                case 5:// 单位
                    String str5 = listIn.get(j) + "";
                    if (StringUtil.isNullOrEmpty(str5)) {
                        info.setStatus(BasicEnums.FAILURE.getStatus());
                        info.setDesc("第" + (i + 1) + "行，未填写单位，请重新填写");
                        return info;
                    } else {
                        dto.setPlan_brand(str5);
                    }
                    break;
                case 6: // 需求数量
                    String str6 = listIn.get(j) + "";
                    if (StringUtil.isNullOrEmpty(str6)) {
                        info.setStatus(BasicEnums.FAILURE.getStatus());
                        info.setDesc("第" + (i + 1) + "行，未填写需求数量，请重新填写");
                        return info;
                    } else if (!StringUtil.isNumbers(str6)) {
                        info.setStatus(BasicEnums.FAILURE.getStatus());
                        info.setDesc("第" + (i + 1) + "行，请输入数字，请重新填写");
                        return info;
                    } else {
                        dto.setPlan_quantity(new BigDecimal(str6));
                    }
                    break;
                case 7: // 补充说明
                    String str7 = listIn.get(j) + "";
                    if (!StringUtil.isNullOrEmpty(str7)) {
                        dto.setPlan_manual(str7);
                    }
                    break;
                default:
                    break;
                }
            }
            dtoList.add(dto);
        }
        info.setStatus(BasicEnums.SUCCESS.getStatus());
        info.setDataList(dtoList);
        return info;
    }
}
